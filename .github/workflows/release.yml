name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
env:
  NODE_OPTIONS: "--max_old_space_size=4096"
  TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-20.04, macos-12, macos-13, windows-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev
          version: 1.0
      - name: Rust setup
        uses: hecrj/setup-rust-action@v2
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
      - name: Sync node version and setup cache
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'yarn' # Set this to npm, yarn or pnpm.
      - name: Setup aarch64 requirements
        if: matrix.platform == 'macos-13'
        run: "rustup target add aarch64-apple-darwin"
      - name: Install app dependencies and build web
        run: yarn && yarn build
      - name: Build the app Linux & Mac
        if: ${{ matrix.platform != 'windows-latest' }}
        uses: tauri-apps/tauri-action@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENABLE_CODE_SIGNING: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
          args: ${{ matrix.platform == 'macos-13' && '--target aarch64-apple-darwin' ||  '' }}
          releaseName: 'v__VERSION__' # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: true
          includeDebug: false
          prerelease: false

      - name: Build the app Windows
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
          yarn tauri build '-- --release'
      - name: Sign Windows App (EV)
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
          dotnet tool install --global AzureSignTool
          # You'll probably want to template in your app version number here somehow
          AzureSignTool sign -kvu "${{ secrets.AZURE_KEY_VAULT_URI }}" -kvi "${{ secrets.AZURE_CLIENT_ID }}" -kvt "${{ secrets.AZURE_TENANT_ID }}"-kvs "${{ secrets.AZURE_CLIENT_SECRET }}" -kvc ${{ secrets.AZURE_CERT_NAME }} -tr http://timestamp.digicert.com -v src-tauri\target\release\bundle\msi\code_expert_sync_${{ github.ref_name }}_x64_en-US.msi -d "ETH Zurich"
      - name: Sign Windows Update Bundle
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
          # These files were generated by the build, but contain a non code signed (EV) version of our app
          # So we need to scrap them, and sign our own
          rm src-tauri\target\release\bundle\msi\code_expert_sync_${{ github.ref_name }}_x64_en-US.msi.zip
          rm src-tauri\target\release\bundle\msi\code_expert_sync_${{ github.ref_name }}_x64_en-US.msi.zip.sig
          # Zip the MSI we signed using AzureSignTool
          # Tauri currently zips, but doesn't compress. So we use `-mx=0` which enables copy/store mode
          7z a -mx=0 src-tauri\target\release\bundle\msi\code_expert_sync_${{ github.ref_name }}_x64_en-US.msi.zip .\src-tauri\target\release\bundle\msi\code_expert_sync_${{ github.ref_name }}_x64_en-US.msi
          # Generate the `msi.sig` file for the updater!
          yarn tauri signer sign src-tauri\target\release\bundle\msi\code_expert_sync_${{ github.ref_name }}_x64_en-US.msi.zip --private-key ${{ secrets.TAURI_PRIVATE_KEY }} --password ${{ secrets.TAURI_KEY_PASSWORD }}
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        if: ${{ matrix.platform == 'windows-latest' }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: src-tauri\target\release\*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true